import streamlit as st
import pandas as pd
import numpy as np
import joblib
import io

st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É", layout="wide")
st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞")

@st.cache_resource
def load_model():
    model = joblib.load("model.pkl")
    scaler = joblib.load("scaler.pkl")
    return model, scaler

@st.cache_data
def load_data():
    return pd.read_excel("Data.xlsx", engine="openpyxl")

def outliers(Data, col="–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É", window=4, threshold=2.5):
    Data = Data.copy()
    Data["MA"] = Data[col].rolling(window=window, center=True).mean()
    Data["delta"] = np.abs(Data[col] - Data["MA"])
    std = Data["delta"].std()
    Data["cleaned"] = np.where(Data["delta"] > threshold * std, Data["MA"], Data[col])
    return Data

def create_features(Data):
    Data = Data.copy()
    Data = outliers(Data)
    Data["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"] = Data["cleaned"]
    Data["dt"] = pd.to_datetime(Data["dt"])
    Data = Data.sort_values("dt")
    Data["week"] = Data["dt"].dt.isocalendar().week
    Data["month"] = Data["dt"].dt.month
    Data["quarter"] = Data["dt"].dt.quarter
    Data["year"] = Data["dt"].dt.year

    for lag in [1, 2, 4, 12]:
        Data[f"lag_{lag}"] = Data["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"].shift(lag)
        Data[f"rolling_mean_{lag}"] = Data["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"].shift(1).rolling(window=lag).mean()

    return Data.fillna(Data.median(numeric_only=True)).reset_index(drop=True)

def forecast(Data, model, scaler, features, horizon_weeks=52):
    Data = create_features(Data)
    Data = Data.sort_values("dt")
    today = pd.to_datetime("today").normalize()

    new_row = {
        "dt": today,
        "–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É": Data["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"].iloc[-1]
    }
    Data = pd.concat([Data, pd.DataFrame([new_row])], ignore_index=True)

    future_data = []

    for _ in range(horizon_weeks):
        new_date = Data.iloc[-1]["dt"] + pd.Timedelta(weeks=1)
        new_row = {
            "dt": new_date,
            "–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É": Data["–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"].iloc[-1]
        }
        Data = pd.concat([Data, pd.DataFrame([new_row])], ignore_index=True)
        Data = create_features(Data)

        last_row = Data[features].iloc[[-1]]

        if hasattr(scaler, 'feature_names_in_'):
            missing = set(scaler.feature_names_in_) - set(last_row.columns)
            if missing:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing}")
            last_row = last_row.loc[:, scaler.feature_names_in_]

        X_pred = scaler.transform(last_row)
        pred = model.predict(X_pred)[0]

        Data.loc[Data.index[-1], "–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"] = pred
        future_data.append({"dt": new_date, "–ü—Ä–æ–≥–Ω–æ–∑": pred})

    return pd.DataFrame(future_data)

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ===
st.sidebar.header("üìÇ –î–∞–Ω–Ω—ã–µ")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (.xlsx)", type="xlsx")

if uploaded_file:
    Data = pd.read_excel(uploaded_file, engine="openpyxl")
    st.sidebar.success("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∞–π–ª")
else:
    Data = load_data()
    st.sidebar.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
horizon = st.sidebar.selectbox("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–Ω–µ–¥–µ–ª—å):", [4, 12, 26, 52, 56, 64, 104])

if st.sidebar.button("üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
    model, scaler = load_model()
    df_prepared = create_features(Data)
    features = [col for col in df_prepared.columns if col not in ["dt", "–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É"]]

    forecast_df = forecast(Data, model, scaler, features, horizon_weeks=horizon)
    min_row = forecast_df.loc[forecast_df['–ü—Ä–æ–≥–Ω–æ–∑'].idxmin()]

    st.subheader("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±—É–¥—É—â–∏–µ –Ω–µ–¥–µ–ª–∏")
    st.line_chart(forecast_df.set_index("dt")["–ü—Ä–æ–≥–Ω–æ–∑"])

    st.success(f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: **{int(min_row['–ü—Ä–æ–≥–Ω–æ–∑'])} ‚ÇΩ** ‚Äî üìÖ –¥–∞—Ç–∞: **{min_row['dt'].strftime('%d.%m.%Y')}**")
    st.dataframe(forecast_df.set_index("dt"))

    # === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø –ü–û –ó–ê–ö–£–ü–ö–ï ===
    forecast_series = forecast_df["–ü—Ä–æ–≥–Ω–æ–∑"].values
    buy_weeks = horizon  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤–µ—Å—å –≥–æ—Ä–∏–∑–æ–Ω—Ç

    for i in range(1, len(forecast_series) - 1):
        if forecast_series[i] < forecast_series[i - 1] and forecast_series[i] < forecast_series[i + 1]:
            buy_weeks = i + 1
            break

    buy_date = forecast_df.iloc[buy_weeks - 1]["dt"]
    st.info(f"üõí **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ó–∞–∫—É–ø–∏—Ç—å –∞—Ä–º–∞—Ç—É—Ä—É –Ω–∞ **{buy_weeks} –Ω–µ–¥–µ–ª—å(–∏)** –≤–ø–µ—Ä—ë–¥ –¥–æ **{buy_date.strftime('%d.%m.%Y')}**, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏—è —Ü–µ–Ω.")

    # === –ö–ù–û–ü–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ===
    buffer = io.BytesIO
